#!/bin/bash

set -euo pipefail

## Variables
DISK="/dev/sda"
HOSTNAME="Arch"
## Functions

cecho() {
  GREEN='\033[0;32m'
  NC='\033[0m'
  echo -e "${GREEN}=== $1 ===${NC}"
}

arch_install_before_chroot() {

  cecho "Install Arch Linux"

  cecho "Partitioning the disk"
  parted -s $DISK \
    mklabel gpt \
    mkpart ESP 1MiB 256MiB \
    set 1 esp on \
    mkpart boot 256MiB 768MiB \
    mkpart root 768MiB 100%

  cecho "List the Partitions"
  fdisk -l

  cecho "Load the dm-crypt and dm-mod kernel module"
  modprobe dm-crypt
  modprobe dm-mod

  cecho "Encrypt the boot partition"
  cecho "Please provide the passphrase to encrypt the boot partition"
  cryptsetup luksFormat --type luks1 /dev/sda2

  cecho "Open the encrypted boot partition"
  cecho "Please provide the passphrase to open the encrypted boot partition"
  cryptsetup open /dev/sda2 luks_boot

  cecho "Encrypt the root partition"
  cecho "Please provide the passphrase to encrypt the root partition"
  cryptsetup luksFormat -v -s 512 -h sha512 /dev/sda3

  cecho "Open the encrypted root partition"
  cecho "Please provide the passphrase to open the encrypted root partition"
  cryptsetup open /dev/sda3 luks_root

  cecho "Format the Partitions"
  mkfs.vfat -n "EFI System Partition" /dev/sda1
  mkfs.ext4 -L boot /dev/mapper/luks_boot
  mkfs.ext4 -L root /dev/mapper/luks_root

  cecho "Mount the Partitions"
  mount /dev/mapper/luks_root /mnt
  mkdir /mnt/boot
  mount /dev/mapper/luks_boot /mnt/boot
  mkdir /mnt/boot/efi
  mount /dev/sda1 /mnt/boot/efi

  cecho "Install the linux packages"
  pacstrap -i /mnt base linux linux-firmware

  cecho "Generate the fstab configuration file"
  genfstab -U /mnt > /mnt/etc/fstab

  cecho "chroot into the '/mnt' and Run 'secureos install-chroot'"

}

arch_install_after_chroot() {

  cecho "Install the necessary packages"
  pacman-key --refresh-keys
  pacman -S base-devel efibootmgr grub vim networkmanager

  cecho "Configure root password"
  cecho "Enter the password for root user"
  passwd

  cecho "Configure the locale settings"
  sed -i '/^#en_US.UTF-8 UTF-8/s/^#//' /etc/locale.gen
  locale-gen
  echo LANG=en_US.UTF-8 > /etc/locale.conf
  export LANG=en_US.UTF-8

  cecho "Configure the timezone settings"
  ln -sf /usr/share/zoneinfo/Asia/Dubai /etc/localtime
  hwclock --systohc --utc

  cecho "set hostname and hosts file"
  echo $HOSTNAME > /etc/hostname
  echo "127.0.0.1 localhost" > /etc/hosts
  echo "::1 localhost" >> /etc/hosts

  cecho "Configure GRUB settings with LUKS encryption"
  sed -i 's,GRUB_CMDLINE_LINUX="",GRUB_CMDLINE_LINUX="cryptdevice=/dev/sda3:luks_root",g' /etc/default/grub
  sed -i '/^#GRUB_ENABLE_CRYPTODISK/s/^#//' /etc/default/grub

  cecho "Enable luks in mkinitcpio"
  sed -i '/^HOOKS/s/block /block encrypt /' /etc/mkinitcpio.conf
  mkinitcpio -p linux

  cecho "Install and configure the GRUB"
  grub-install --target=x86_64-efi --boot-directory=/boot --efi-directory=/boot/efi --bootloader-id=grub --recheck
  grub-mkconfig -o /boot/grub/grub.cfg
  chmod 700 /boot

  cecho "Enable network manager"
  systemctl enable NetworkManager

  cecho "Exit from chroot"
  exit

}

usb_auto_restart() {
  cecho "Copy the udev rules"
  cp auto-restart/85-remove-usb.rules /etc/udev/rules.d/
  cp auto-restart/solo-restart /usr/local/bin/
  chmod +x /usr/local/bin/solo-restart

  cecho "Reload the udev rules"
  udevadm control --reload-rules
  systemctl reload systemd-udevd
}

wipe_ram() {
  cecho "Setup the ArchStrike repository"
  echo "[archstrike]" >> /etc/pacman.conf
  echo "Server = https://mirror.archstrike.org/$arch/$repo" >> /etc/pacman.conf
  pacman -Syy

  cecho "Install the ArchStrike keyring"
  pacman-key --init
  dirmngr < /dev/null
  wget https://archstrike.org/keyfile.asc
  pacman-key --add keyfile.asc
  pacman-key --lsign-key 9D5F1C051D146843CDA4858BDE64825E7CBC0D51

  pacman -S archstrike-keyring
  pacman -S archstrike-mirrorlist
  sed -i 's,Server = https://mirror.archstrike.org/$arch/$repo,Include = /etc/pacman.d/archstrike-mirrorlist,g' /etc/pacman.conf
  pacman -Syy

  cecho "Install the secure-delete package"
  pacman -S secure-delete

  cecho "Copy the RAM wipe script"
  cp ram-wipe/shutdown_ramwipe /usr/local/bin/
  chmod +x /usr/local/bin/shutdown_ramwipe

  cecho "Configure the RAM wipe systemd service"
  cp ram-wipe/ram-wipe.service /usr/lib/systemd/system/
  systemctl daemon-reload
  systemctl enable ram-wipe.service
  systemctl start ram-wipe.service

}

random_mac() {
  cecho "Copy the configuration file"
  cp random-mac/random_mac.conf /etc/NetworkManager/conf.d/

  cecho "Reload the NetworkManager service"
  systemctl restart NetworkManager
}

uefi_secure_boot() {
  read -p "Did you enable the secure boot in BIOS settings? (yes / no): " secure

  if [ "$secure" == "yes" ]; then
    cecho "Install the secure boot tool"
    pacman -S efitools sbsigntools
    git clone https://github.com/saravanan30erd/secureboot
    cd secureboot
    make install

    cecho "Generate the UEFI secure boot keys"
    secureboot generate-keys
    cecho "Enrolling secure boot keys in UEFI firmware"
    secureboot enroll-keys
    cecho "Signing the boot loader with secure boot keys"
    secureboot sign-keys
    cecho "Verify the signed boot loader"
    secureboot verify-bootloader
  else
    cecho "!!! Please enable the secure boot in BIOS settings !!!"
    exit 1
  fi
}


## Main

case "$1" in
  install)
    arch_install_before_chroot;
    ;;
  install-chroot)
    arch_install_after_chroot;
    ;;
  secureboot)
    enable_secureboot;
    ;;
  usb-auto-reboot)
    usb_auto_restart;
    ;;
  ram-wipe)
    wipe_ram;
    ;;
  random-mac)
    random_mac;
    ;;
  secure-boot)
    uefi_secure_boot;
    ;;
  *)
    echo "  install     Arch Linux Installation with LUKS - Part 1"
    echo "  install-chroot     Arch Linux Installation with LUKS - Part 2"
    echo "  secure-boot    Enable Secure Boot in UEFI"
    echo "  usb-auto-reboot   Automatically reboot if any USB device is removed"
    echo "  ram-wipe    Wipe the RAM during shutdown and reboot"
    echo "  random-mac    Configure MAC address randomization"
    ;;
esac
